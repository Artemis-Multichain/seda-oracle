This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-30T15:19:01.298Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
docker-compose.yml
docker-entrypoint.sh
Dockerfile

================================================================
Repository Files
================================================================

================
File: docker-compose.yml
================
services:
  seda-data-proxy:
    build:
      context: ../..
      dockerfile: .build/docker/Dockerfile
    ports:
      - "5384:5384"
    # environment:
    #   # Provide the private key if available
    #   SEDA_DATA_PROXY_PRIVATE_KEY: ${SEDA_DATA_PROXY_PRIVATE_KEY}
    #
    # volumes:
    #   # Mount config.json if it exists in the host folder
    #   - ./config.json:/app/config.json:ro
    #   # Mount a data proxy private key file
    #   - ./data-proxy-private-key.json:/app/data-proxy-private-key.json:ro
    networks:
      - proxy-network

networks:
  proxy-network:
    driver: bridge

================
File: docker-entrypoint.sh
================
#!/bin/bash

# Initialize flags for config.json and private key
CONFIG_EXISTS=false
PK_EXISTS=false

# Check if config.json exists
if [ -f /app/config.json ]; then
  echo "config.json detected"
  CONFIG_EXISTS=true
else
  echo "config.json not found"
fi

# Check if data-proxy-private-key.json exists
if [ -f /app/data-proxy-private-key.json ]; then
  echo "data-proxy-private-key.json detected"
  PK_EXISTS=true
elif [ -n "$SEDA_DATA_PROXY_PRIVATE_KEY" ]; then
  # If private key file does not exist, check if the private key is provided via environment variable
  echo "Private key provided via environment variable"
  echo "$SEDA_DATA_PROXY_PRIVATE_KEY" >/app/data-proxy-private-key.json
  PK_EXISTS=true
else
  echo "No private key provided"
fi

run_bun_command() {
  if ! bun "$@"; then
    echo "Failed to run: bun $*"
    exit 1
  fi
}

# Determine the command to run based on the presence of config.json and private key
if [ "$CONFIG_EXISTS" = true ] && [ "$PK_EXISTS" = true ]; then
  # Both config.json and private key are provided
  echo "Running with config and private key"
  RUN_CMD="start run --config /app/config.json --private-key-file /app/data-proxy-private-key.json"
elif [ "$CONFIG_EXISTS" = true ] && [ "$PK_EXISTS" = false ]; then
  # Only config.json is provided
  echo "Running with config only"
  run_bun_command start init
  RUN_CMD="start run --config /app/config.json"
else
  # Neither config.json nor private key is provided
  echo "Running with --disable-proof"
  run_bun_command start init
  RUN_CMD="start run --disable-proof"
fi

# Execute the final command
run_bun_command $RUN_CMD

================
File: Dockerfile
================
FROM oven/bun:alpine

WORKDIR /app

COPY . .

RUN bun install

# Expose the port the app runs on
EXPOSE 5384

# Entry script to handle conditional startup
COPY .build/debug/docker-entrypoint.sh ./docker-entrypoint.sh
RUN chmod +x ./docker-entrypoint.sh

ENTRYPOINT ["sh", "./docker-entrypoint.sh"]
